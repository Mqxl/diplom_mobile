{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport * as DocumentPicker from 'expo-document-picker';\nimport * as XLSX from 'xlsx';\nimport * as SQLite from 'expo-sqlite';\nimport { BarChart } from 'react-native-chart-kit';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar db = SQLite.openDatabase('test.db');\nvar MessagesScreen = function MessagesScreen() {\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    excelData = _useState2[0],\n    setExcelData = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  var _useState5 = useState([]),\n    _useState6 = _slicedToArray(_useState5, 2),\n    students = _useState6[0],\n    setStudents = _useState6[1];\n  var _useState7 = useState(''),\n    _useState8 = _slicedToArray(_useState7, 2),\n    searchId = _useState8[0],\n    setSearchId = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    searchResult = _useState10[0],\n    setSearchResult = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    gpaStatistics = _useState12[0],\n    setGpaStatistics = _useState12[1];\n  var handlePickDocument = function () {\n    var _ref = _asyncToGenerator(function* () {\n      setLoading(true);\n      console.log('Выбор документа начат...');\n      try {\n        var result = yield DocumentPicker.getDocumentAsync({\n          type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        });\n        console.log(result);\n        if (!result.cancelled) {\n          console.log('Документ выбран:', result.assets[0].uri);\n          db.transaction(function (tx) {\n            tx.executeSql('DROP TABLE IF EXISTS Students', [], function () {\n              console.log('Таблица успешно удалена');\n            });\n          });\n          db.transaction(function (tx) {\n            tx.executeSql('CREATE TABLE IF NOT EXISTS Students (id INTEGER PRIMARY KEY AUTOINCREMENT, last_name TEXT, first_name TEXT, middle_name TEXT, iin TEXT, specialty_code TEXT, specialty_name TEXT, graduation_year TEXT, admission_year TEXT, course TEXT, payment_form TEXT, language_of_study TEXT, form_of_study TEXT, education_level TEXT, academic_status TEXT, status TEXT, discipline_code TEXT, discipline_name TEXT, attestation_1 TEXT, attestation_2 TEXT, exam TEXT, total_score TEXT, letter_grade TEXT, annual_gpa TEXT, cumulative_gpa TEXT, semester_gpa TEXT)', [], _asyncToGenerator(function* () {\n              console.log('Таблица успешно создана');\n              var response = yield fetch(result.assets[0].uri);\n              var arrayBuffer = yield response.arrayBuffer();\n              var workbook = XLSX.read(arrayBuffer, {\n                type: 'array'\n              });\n              var sheetName = workbook.SheetNames[2];\n              var sheet = workbook.Sheets[sheetName];\n              var jsonData = XLSX.utils.sheet_to_json(sheet, {\n                header: 1\n              });\n              setExcelData(jsonData);\n              setLoading(false);\n              insertDataIntoTable(jsonData.slice(1));\n              console.log('Установлено состояние загрузки в false.');\n            }), function (error) {\n              console.error('Ошибка при создании таблицы:', error);\n              setLoading(false);\n            });\n          });\n        }\n      } catch (error) {\n        console.error('Ошибка при выборе документа:', error);\n        setLoading(false);\n      }\n    });\n    return function handlePickDocument() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handleCountRecords = function handleCountRecords() {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT COUNT(*) FROM Students', [], function (_, result) {\n        var count = result.rows.item(0)['COUNT(*)'];\n        alert(`Количество записей в таблице: ${count}`);\n      }, function (error) {\n        console.error('Ошибка при выполнении запроса на подсчет записей:', error);\n      });\n    });\n  };\n  var handleSelectStudents = function handleSelectStudents() {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM Students', [], function (_, result) {\n        var rows = result.rows;\n        var studentsArray = [];\n        for (var i = 0; i < rows.length; i++) {\n          studentsArray.push(rows.item(i));\n        }\n        setStudents(studentsArray);\n        console.log('Результаты запроса:', studentsArray);\n      }, function (error) {\n        console.error('Ошибка при выполнении запроса на выборку данных', error);\n      });\n    });\n  };\n  var insertDataIntoTable = function insertDataIntoTable(dataArray) {\n    db.transaction(function (tx) {\n      dataArray.forEach(function (data) {\n        tx.executeSql('INSERT INTO Students (last_name, first_name, middle_name, iin, specialty_code, specialty_name, graduation_year, admission_year, course, payment_form, language_of_study, form_of_study, education_level, academic_status, status, discipline_code, discipline_name, attestation_1, attestation_2, exam, total_score, letter_grade, annual_gpa, cumulative_gpa, semester_gpa) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', data, function (_, result) {\n          console.log('Данные успешно вставлены');\n        }, function (_, error) {\n          console.error('Ошибка при вставке данных:', error);\n        });\n      });\n    }, null, function () {\n      alert('Данные загружены');\n      console.log('Транзакция завершена');\n    });\n  };\n  var getSemesterGpaStatistics2 = function getSemesterGpaStatistics2() {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT COUNT(semester_gpa) AS count, AVG(semester_gpa) AS average, MAX(semester_gpa) AS maxGpa, MIN(semester_gpa) AS minGpa FROM Students', [], function (_, result) {\n        var rows = result.rows;\n        if (rows.length > 0) {\n          var statistics = rows.item(0);\n          console.log('Статистика по :', statistics);\n        } else {\n          console.log('Нет данных для вычисления статистики по semester_gpa');\n        }\n      }, function (error) {\n        console.error('Ошибка при выполнении запроса на получение статистики', error);\n      });\n    });\n  };\n  var getSemesterGpaStatistics = function getSemesterGpaStatistics() {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT COUNT(semester_gpa) AS count, AVG(semester_gpa) AS average, MAX(semester_gpa) AS maxGpa, MIN(semester_gpa) AS minGpa FROM Students', [], function (_, result) {\n        var rows = result.rows;\n        if (rows.length > 0) {\n          var statistics = rows.item(0);\n          setGpaStatistics(statistics);\n          console.log('Статистика по semester_gpa:', statistics);\n        } else {\n          console.log('Нет данных для вычисления статистики по semester_gpa');\n        }\n      }, function (error) {\n        console.error('Ошибка при выполнении запроса на получение статистики', error);\n      });\n    });\n  };\n  var handleClearTable = function handleClearTable() {\n    db.transaction(function (tx) {\n      tx.executeSql('DELETE FROM Students', [], function (_, result) {\n        console.log('Таблица очищена');\n        setStudents([]);\n      });\n    }, function (error) {\n      console.error('Ошибка при очистке таблицы:', error);\n    });\n  };\n  var handleSearchById = function handleSearchById() {\n    db.transaction(function (tx) {\n      tx.executeSql('SELECT * FROM Students WHERE id = ?', [searchId], function (_, result) {\n        var rows = result.rows;\n        if (rows.length > 0) {\n          var student = rows.item(0);\n          setSearchResult(student);\n          console.log('Результат поиска:', student);\n        } else {\n          setSearchResult(null);\n          console.log('Студент с таким ID не найден');\n        }\n      }, function (error) {\n        console.error('Ошибка при выполнении запроса на поиск данных', error);\n      });\n    });\n  };\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Text, {\n      style: styles.title,\n      children: \"\\u0421\\u043E\\u043E\\u0431\\u0449\\u0435\\u043D\\u0438\\u044F\"\n    }), _jsx(Button, {\n      title: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0444\\u0430\\u0439\\u043B\",\n      onPress: handlePickDocument\n    }), _jsx(Button, {\n      title: \"\\u0412\\u044B\\u0431\\u0440\\u0430\\u0442\\u044C \\u0441\\u0442\\u0443\\u0434\\u0435\\u043D\\u0442\\u043E\\u0432\",\n      onPress: handleSelectStudents\n    }), _jsx(Button, {\n      title: \"\\u041E\\u0447\\u0438\\u0441\\u0442\\u0438\\u0442\\u044C \\u0442\\u0430\\u0431\\u043B\\u0438\\u0446\\u0443\",\n      onPress: handleClearTable\n    }), _jsx(Button, {\n      title: \"\\u041F\\u043E\\u0441\\u0447\\u0438\\u0442\\u0430\\u0442\\u044C \\u0437\\u0430\\u043F\\u0438\\u0441\\u0438\",\n      onPress: handleCountRecords\n    }), _jsx(Button, {\n      title: \"\\u0421\\u0442\\u0430\\u0442\\u0438\\u0441\\u0442\\u0438\\u043A\\u0430 \\u043F\\u043E GPA\",\n      onPress: getSemesterGpaStatistics\n    }), loading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    }) : null, _jsxs(View, {\n      style: styles.searchContainer,\n      children: [_jsx(TextInput, {\n        style: styles.input,\n        placeholder: \"\\u0412\\u0432\\u0435\\u0434\\u0438\\u0442\\u0435 ID\",\n        value: searchId,\n        onChangeText: function onChangeText(text) {\n          return setSearchId(text);\n        }\n      }), _jsx(Button, {\n        title: \"\\u041D\\u0430\\u0439\\u0442\\u0438\",\n        onPress: handleSearchById\n      })]\n    }), gpaStatistics && _jsxs(View, {\n      style: styles.chartContainer,\n      children: [_jsx(Text, {\n        style: styles.chartTitle,\n        children: \"\\u0421\\u0442\\u0430\\u0442\\u0438\\u0441\\u0442\\u0438\\u043A\\u0430 \\u043F\\u043E semester_gpa:\"\n      }), _jsx(BarChart, {\n        data: {\n          labels: ['Минимальное GPA', 'Среднее GPA', 'Максимальное GPA'],\n          datasets: [{\n            data: [parseFloat(gpaStatistics.minGpa), parseFloat(gpaStatistics.average), parseFloat(gpaStatistics.maxGpa)]\n          }]\n        },\n        width: Dimensions.get('window').width - 40,\n        height: 200,\n        yAxisSuffix: \"\",\n        chartConfig: {\n          backgroundColor: '#ffffff',\n          backgroundGradientFrom: '#ffffff',\n          backgroundGradientTo: '#ffffff',\n          decimalPlaces: 2,\n          color: function color() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            return `rgba(0, 0, 0, ${opacity})`;\n          },\n          labelColor: function labelColor() {\n            var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n            return `rgba(0, 0, 0, ${opacity})`;\n          },\n          style: {\n            borderRadius: 16\n          }\n        },\n        verticalLabelRotation: 30\n      })]\n    }), searchResult ? _jsxs(ScrollView, {\n      style: styles.resultContainer,\n      children: [_jsx(Text, {\n        style: styles.resultText,\n        children: \"\\u0420\\u0435\\u0437\\u0443\\u043B\\u044C\\u0442\\u0430\\u0442 \\u043F\\u043E\\u0438\\u0441\\u043A\\u0430:\"\n      }), Object.keys(searchResult).map(function (key) {\n        return _jsxs(View, {\n          style: styles.resultRow,\n          children: [_jsxs(Text, {\n            style: styles.resultLabel,\n            children: [key, \":\"]\n          }), _jsx(Text, {\n            style: styles.resultValue,\n            children: searchResult[key]\n          })]\n        }, key);\n      })]\n    }) : null]\n  });\n};\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n    backgroundColor: '#fff'\n  },\n  title: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    marginBottom: 20\n  },\n  item: {\n    padding: 10,\n    borderBottomWidth: 1,\n    borderBottomColor: '#ccc'\n  },\n  searchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    marginVertical: 10\n  },\n  input: {\n    flex: 1,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 5,\n    paddingHorizontal: 10,\n    marginRight: 10\n  },\n  resultContainer: {\n    marginVertical: 10,\n    paddingHorizontal: 20,\n    borderWidth: 1,\n    borderColor: '#ccc',\n    borderRadius: 5\n  },\n  resultText: {\n    fontWeight: 'bold',\n    marginBottom: 5\n  },\n  row: {\n    flexDirection: 'row',\n    borderBottomWidth: 1,\n    borderColor: 'gray'\n  },\n  cell: {\n    flex: 1,\n    padding: 10,\n    textAlign: 'center'\n  }\n});\nexport default MessagesScreen;","map":{"version":3,"names":["React","useState","View","ScrollView","Text","StyleSheet","Button","ActivityIndicator","FlatList","TextInput","Dimensions","DocumentPicker","XLSX","SQLite","BarChart","jsx","_jsx","jsxs","_jsxs","db","openDatabase","MessagesScreen","_useState","_useState2","_slicedToArray","excelData","setExcelData","_useState3","_useState4","loading","setLoading","_useState5","_useState6","students","setStudents","_useState7","_useState8","searchId","setSearchId","_useState9","_useState10","searchResult","setSearchResult","_useState11","_useState12","gpaStatistics","setGpaStatistics","handlePickDocument","_ref","_asyncToGenerator","console","log","result","getDocumentAsync","type","cancelled","assets","uri","transaction","tx","executeSql","response","fetch","arrayBuffer","workbook","read","sheetName","SheetNames","sheet","Sheets","jsonData","utils","sheet_to_json","header","insertDataIntoTable","slice","error","apply","arguments","handleCountRecords","_","count","rows","item","alert","handleSelectStudents","studentsArray","i","length","push","dataArray","forEach","data","getSemesterGpaStatistics2","statistics","getSemesterGpaStatistics","handleClearTable","handleSearchById","student","style","styles","container","children","title","onPress","size","color","searchContainer","input","placeholder","value","onChangeText","text","chartContainer","chartTitle","labels","datasets","parseFloat","minGpa","average","maxGpa","width","get","height","yAxisSuffix","chartConfig","backgroundColor","backgroundGradientFrom","backgroundGradientTo","decimalPlaces","opacity","undefined","labelColor","borderRadius","verticalLabelRotation","resultContainer","resultText","Object","keys","map","key","resultRow","resultLabel","resultValue","create","flex","justifyContent","alignItems","fontSize","fontWeight","marginBottom","padding","borderBottomWidth","borderBottomColor","flexDirection","marginVertical","borderWidth","borderColor","paddingHorizontal","marginRight","row","cell","textAlign"],"sources":["C:/Users/Meruem/Desktop/diplom_project/screens/main/MessagesScreen.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { View, ScrollView, Text, StyleSheet, Button, ActivityIndicator, FlatList, TextInput, Dimensions } from 'react-native'; // Import Dimensions module\r\nimport * as DocumentPicker from 'expo-document-picker';\r\nimport * as XLSX from 'xlsx';\r\nimport * as SQLite from 'expo-sqlite';\r\nimport { BarChart } from 'react-native-chart-kit';\r\n\r\nconst db = SQLite.openDatabase('test.db');\r\n\r\nconst MessagesScreen = () => {\r\n    const [excelData, setExcelData] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [students, setStudents] = useState([]);\r\n    const [searchId, setSearchId] = useState('');\r\n    const [searchResult, setSearchResult] = useState(null);\r\n    const [gpaStatistics, setGpaStatistics] = useState(null);\r\n    const handlePickDocument = async () => {\r\n    setLoading(true);\r\n    console.log('Выбор документа начат...');\r\n\r\n    try {\r\n      const result = await DocumentPicker.getDocumentAsync({ type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\r\n      console.log(result);\r\n\r\n      if (!result.cancelled) {\r\n        console.log('Документ выбран:', result.assets[0].uri);\r\n\r\n        // Удаление таблицы перед созданием новой\r\n        db.transaction(tx => {\r\n          tx.executeSql('DROP TABLE IF EXISTS Students', [], () => {\r\n            console.log('Таблица успешно удалена');\r\n          });\r\n        });\r\n\r\n        // Создание новой таблицы\r\n        db.transaction(tx => {\r\n          tx.executeSql(\r\n              'CREATE TABLE IF NOT EXISTS Students (id INTEGER PRIMARY KEY AUTOINCREMENT, last_name TEXT, first_name TEXT, middle_name TEXT, iin TEXT, specialty_code TEXT, specialty_name TEXT, graduation_year TEXT, admission_year TEXT, course TEXT, payment_form TEXT, language_of_study TEXT, form_of_study TEXT, education_level TEXT, academic_status TEXT, status TEXT, discipline_code TEXT, discipline_name TEXT, attestation_1 TEXT, attestation_2 TEXT, exam TEXT, total_score TEXT, letter_grade TEXT, annual_gpa TEXT, cumulative_gpa TEXT, semester_gpa TEXT)',\r\n              [],\r\n              async () => {\r\n                console.log('Таблица успешно создана');\r\n\r\n                const response = await fetch(result.assets[0].uri);\r\n                const arrayBuffer = await response.arrayBuffer();\r\n\r\n                const workbook = XLSX.read(arrayBuffer, {type: 'array'});\r\n                const sheetName = workbook.SheetNames[2];\r\n                const sheet = workbook.Sheets[sheetName];\r\n                const jsonData = XLSX.utils.sheet_to_json(sheet, {header: 1});\r\n\r\n                setExcelData(jsonData);\r\n                setLoading(false);\r\n                insertDataIntoTable(jsonData.slice(1)); // Пропустить первую строку с заголовками\r\n\r\n                console.log('Установлено состояние загрузки в false.');\r\n              },\r\n              error => {\r\n                console.error('Ошибка при создании таблицы:', error);\r\n                setLoading(false);\r\n              }\r\n          );\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Ошибка при выборе документа:', error);\r\n      setLoading(false);\r\n    }\r\n  };\r\n    // const getSemesterGpaStatistics = () => {\r\n    //     db.transaction(tx => {\r\n    //         tx.executeSql(\r\n    //             'SELECT semester_gpa FROM Students',\r\n    //             [],\r\n    //             (_, result) => {\r\n    //                 const { rows } = result;\r\n    //                 const gpas = [];\r\n    //                 for (let i = 0; i < rows.length; i++) {\r\n    //                     gpas.push(rows.item(i).semester_gpa);\r\n    //                 }\r\n    //                 const maxGpa = Math.max(...gpas);\r\n    //                 const minGpa = Math.min(...gpas);\r\n    //                 const averageGpa = gpas.reduce((acc, gpa) => acc + gpa, 0) / gpas.length;\r\n    //                 const count = gpas.length;\r\n    //                 setGpaStatistics({ average: averageGpa, count, maxGpa, minGpa });\r\n    //             },\r\n    //             error => {\r\n    //                 console.error('Error fetching semester_gpa:', error);\r\n    //             }\r\n    //         );\r\n    //     });\r\n    // };\r\n  const handleCountRecords = () => {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n          'SELECT COUNT(*) FROM Students',\r\n          [],\r\n          (_, result) => {\r\n            const count = result.rows.item(0)['COUNT(*)'];\r\n            alert(`Количество записей в таблице: ${count}`);\r\n          },\r\n          error => {\r\n            console.error('Ошибка при выполнении запроса на подсчет записей:', error);\r\n          }\r\n      );\r\n    });\r\n  };\r\n  const handleSelectStudents = () => {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n          'SELECT * FROM Students',\r\n          [],\r\n          (_, result) => {\r\n            const { rows } = result;\r\n            const studentsArray = [];\r\n            for (let i = 0; i < rows.length; i++) {\r\n              studentsArray.push(rows.item(i));\r\n            }\r\n            setStudents(studentsArray);\r\n            console.log('Результаты запроса:', studentsArray);\r\n          },\r\n          error => {\r\n            console.error('Ошибка при выполнении запроса на выборку данных', error);\r\n          }\r\n      );\r\n    });\r\n  };\r\n  const insertDataIntoTable = (dataArray) => {\r\n    db.transaction(\r\n        tx => {\r\n          dataArray.forEach(data => {\r\n            tx.executeSql(\r\n                'INSERT INTO Students (last_name, first_name, middle_name, iin, specialty_code, specialty_name, graduation_year, admission_year, course, payment_form, language_of_study, form_of_study, education_level, academic_status, status, discipline_code, discipline_name, attestation_1, attestation_2, exam, total_score, letter_grade, annual_gpa, cumulative_gpa, semester_gpa) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',\r\n                data,\r\n                (_, result) => {\r\n                  console.log('Данные успешно вставлены');\r\n                },\r\n                (_, error) => {\r\n                  console.error('Ошибка при вставке данных:', error);\r\n                }\r\n            );\r\n          });\r\n        },\r\n        null,\r\n        () => {\r\n          alert('Данные загружены');\r\n          console.log('Транзакция завершена');\r\n        }\r\n    );\r\n  };\r\n\r\n    const getSemesterGpaStatistics2 = () => {\r\n        db.transaction(tx => {\r\n            tx.executeSql(\r\n                'SELECT COUNT(semester_gpa) AS count, AVG(semester_gpa) AS average, MAX(semester_gpa) AS maxGpa, MIN(semester_gpa) AS minGpa FROM Students',\r\n                [],\r\n                (_, result) => {\r\n                    const { rows } = result;\r\n                    if (rows.length > 0) {\r\n                        const statistics = rows.item(0);\r\n                        console.log('Статистика по :', statistics);\r\n                        // В этом месте вы можете передать статистику в состояние компонента или воспользоваться другой логикой для ее обработки\r\n                    } else {\r\n                        console.log('Нет данных для вычисления статистики по semester_gpa');\r\n                    }\r\n                },\r\n                error => {\r\n                    console.error('Ошибка при выполнении запроса на получение статистики', error);\r\n                }\r\n            );\r\n        });\r\n    };\r\n    const getSemesterGpaStatistics = () => {\r\n        db.transaction(tx => {\r\n            tx.executeSql(\r\n                'SELECT COUNT(semester_gpa) AS count, AVG(semester_gpa) AS average, MAX(semester_gpa) AS maxGpa, MIN(semester_gpa) AS minGpa FROM Students',\r\n                [],\r\n                (_, result) => {\r\n                    const { rows } = result;\r\n                    if (rows.length > 0) {\r\n                        const statistics = rows.item(0);\r\n                        setGpaStatistics(statistics); // Обновляем состояние с полученной статистикой\r\n                        console.log('Статистика по semester_gpa:', statistics);\r\n                    } else {\r\n                        console.log('Нет данных для вычисления статистики по semester_gpa');\r\n                    }\r\n                },\r\n                error => {\r\n                    console.error('Ошибка при выполнении запроса на получение статистики', error);\r\n                }\r\n            );\r\n        });\r\n    };\r\n\r\n\r\n    const handleClearTable = () => {\r\n    db.transaction(\r\n        tx => {\r\n          tx.executeSql('DELETE FROM Students', [], (_, result) => {\r\n            console.log('Таблица очищена');\r\n            setStudents([]);\r\n          });\r\n        },\r\n        error => {\r\n          console.error('Ошибка при очистке таблицы:', error);\r\n        }\r\n    );\r\n  };\r\n  const handleSearchById = () => {\r\n    db.transaction(tx => {\r\n      tx.executeSql(\r\n          'SELECT * FROM Students WHERE id = ?',\r\n          [searchId],\r\n          (_, result) => {\r\n            const { rows } = result;\r\n            if (rows.length > 0) {\r\n              const student = rows.item(0);\r\n              setSearchResult(student);\r\n              console.log('Результат поиска:', student);\r\n            } else {\r\n              setSearchResult(null);\r\n              console.log('Студент с таким ID не найден');\r\n            }\r\n          },\r\n          error => {\r\n            console.error('Ошибка при выполнении запроса на поиск данных', error);\r\n          }\r\n      );\r\n    });\r\n  };\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style={styles.title}>Сообщения</Text>\r\n        <Button title=\"Выбрать файл\" onPress={handlePickDocument} />\r\n        <Button title=\"Выбрать студентов\" onPress={handleSelectStudents} />\r\n        <Button title=\"Очистить таблицу\" onPress={handleClearTable} />\r\n        <Button title=\"Посчитать записи\" onPress={handleCountRecords} />\r\n          <Button title=\"Статистика по GPA\" onPress={getSemesterGpaStatistics} />\r\n\r\n        {loading ? <ActivityIndicator size=\"large\" color=\"#0000ff\" /> : null}\r\n        {/* Кнопка и текстовое поле для поиска */}\r\n        <View style={styles.searchContainer}>\r\n          <TextInput\r\n              style={styles.input}\r\n              placeholder=\"Введите ID\"\r\n              value={searchId}\r\n              onChangeText={text => setSearchId(text)}\r\n          />\r\n          <Button title=\"Найти\" onPress={handleSearchById} />\r\n        </View>\r\n          {/*{gpaStatistics && (*/}\r\n          {/*    <View style={styles.chartContainer}>*/}\r\n          {/*        <Text style={styles.resultText}>Статистика по semester_gpa:</Text>*/}\r\n          {/*        <BarChart*/}\r\n          {/*            data={{*/}\r\n          {/*                labels: ['Минимальное GPA', 'Среднее GPA', 'Максимальное GPA'],*/}\r\n          {/*                datasets: [*/}\r\n          {/*                    {*/}\r\n          {/*                        data: [gpaStatistics.minGpa, gpaStatistics.average, gpaStatistics.maxGpa],*/}\r\n          {/*                    },*/}\r\n          {/*                ],*/}\r\n          {/*            }}*/}\r\n          {/*            width={300}*/}\r\n          {/*            height={200}*/}\r\n          {/*            yAxisSuffix=\"\"*/}\r\n          {/*            chartConfig={{*/}\r\n          {/*                backgroundColor: '#ffffff',*/}\r\n          {/*                backgroundGradientFrom: '#ffffff',*/}\r\n          {/*                backgroundGradientTo: '#ffffff',*/}\r\n          {/*                decimalPlaces: 2,*/}\r\n          {/*                color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,*/}\r\n          {/*                labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,*/}\r\n          {/*                style: {*/}\r\n          {/*                    borderRadius: 16,*/}\r\n          {/*                },*/}\r\n          {/*            }}*/}\r\n          {/*            verticalLabelRotation={30}*/}\r\n          {/*        />*/}\r\n          {/*    </View>*/}\r\n          {/*)}*/}\r\n          {gpaStatistics && (\r\n              <View style={styles.chartContainer}>\r\n                  <Text style={styles.chartTitle}>Статистика по semester_gpa:</Text>\r\n                  <BarChart\r\n                      data={{\r\n                          labels: ['Минимальное GPA', 'Среднее GPA', 'Максимальное GPA'],\r\n                          datasets: [\r\n                              {\r\n                                  data: [\r\n                                      parseFloat(gpaStatistics.minGpa),\r\n                                      parseFloat(gpaStatistics.average),\r\n                                      parseFloat(gpaStatistics.maxGpa)\r\n                                  ],\r\n                              },\r\n                          ],\r\n                      }}\r\n                      width={Dimensions.get('window').width - 40} // ширина графика равна ширине экрана минус отступы\r\n                      height={200}\r\n                      yAxisSuffix=\"\"\r\n                      chartConfig={{\r\n                          backgroundColor: '#ffffff',\r\n                          backgroundGradientFrom: '#ffffff',\r\n                          backgroundGradientTo: '#ffffff',\r\n                          decimalPlaces: 2,\r\n                          color: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\r\n                          labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,\r\n                          style: {\r\n                              borderRadius: 16,\r\n                          },\r\n                      }}\r\n                      verticalLabelRotation={30}\r\n                  />\r\n              </View>\r\n          )}\r\n        {/* Отображение результата поиска */}\r\n        {searchResult ? (\r\n            <ScrollView style={styles.resultContainer}>\r\n              <Text style={styles.resultText}>Результат поиска:</Text>\r\n              {/* Iterate over the properties of searchResult */}\r\n              {Object.keys(searchResult).map(key => (\r\n                  <View key={key} style={styles.resultRow}>\r\n                    <Text style={styles.resultLabel}>{key}:</Text>\r\n                    <Text style={styles.resultValue}>{searchResult[key]}</Text>\r\n                  </View>\r\n              ))}\r\n            </ScrollView>\r\n        ) : null}\r\n\r\n      </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    backgroundColor: '#fff',\r\n  },\r\n  title: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n    marginBottom: 20,\r\n  },\r\n  item: {\r\n    padding: 10,\r\n    borderBottomWidth: 1,\r\n    borderBottomColor: '#ccc',\r\n  },\r\n  searchContainer: {\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    marginVertical: 10,\r\n  },\r\n  input: {\r\n    flex: 1,\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 5,\r\n    paddingHorizontal: 10,\r\n    marginRight: 10,\r\n  },\r\n  resultContainer: {\r\n    marginVertical: 10,\r\n    paddingHorizontal: 20,\r\n    borderWidth: 1,\r\n    borderColor: '#ccc',\r\n    borderRadius: 5,\r\n  },\r\n  resultText: {\r\n    fontWeight: 'bold',\r\n    marginBottom: 5,\r\n  },\r\n    row: {\r\n        flexDirection: 'row',\r\n        borderBottomWidth: 1,\r\n        borderColor: 'gray',\r\n    },\r\n    cell: {\r\n        flex: 1,\r\n        padding: 10,\r\n        textAlign: 'center',\r\n    },\r\n});\r\n\r\nexport default MessagesScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}