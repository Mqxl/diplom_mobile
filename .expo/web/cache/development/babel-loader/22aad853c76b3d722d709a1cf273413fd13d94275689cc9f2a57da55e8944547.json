{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\nimport { db } from \"../../firebase/config\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nexport var getSemesterGpaStatistics = createAsyncThunk('statistics/getSemesterGpaStatistics', function () {\n  var _ref = _asyncToGenerator(function* (_, thunkAPI) {\n    try {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql('SELECT COUNT(semester_gpa) AS count, AVG(semester_gpa) AS average, MAX(semester_gpa) AS maxGpa, MIN(semester_gpa) AS minGpa FROM Students', [], function (_, result) {\n            var rows = result.rows;\n            if (rows.length > 0) {\n              var statistics = rows.item(0);\n              console.log('Статистика по semester_gpa:', statistics);\n              resolve(statistics);\n            } else {\n              console.log('Нет данных для вычисления статистики по semester_gpa');\n              reject('Нет данных для вычисления статистики по semester_gpa');\n            }\n          }, function (error) {\n            console.error('Ошибка при выполнении запроса на получение статистики', error);\n            reject(error.message);\n          });\n        });\n      });\n    } catch (error) {\n      console.error('Ошибка при выполнении запроса на получение статистики', error);\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport var getAllPosts = createAsyncThunk(\"posts/getAllPosts\", function () {\n  var _ref2 = _asyncToGenerator(function* (_, thunkAPI) {\n    try {\n      var getPosts = function () {\n        var _ref3 = _asyncToGenerator(function* () {\n          var querySnapshot = yield getDocs(collection(db, \"posts\"));\n          var posts = [];\n          querySnapshot.forEach(function (doc) {\n            posts.push(doc.data());\n          });\n          return posts;\n        });\n        return function getPosts() {\n          return _ref3.apply(this, arguments);\n        };\n      }();\n      var posts = yield getPosts();\n      return posts.sort(function (firstPost, lastPost) {\n        return lastPost.createdAt - firstPost.createdAt;\n      });\n    } catch (error) {\n      Alert.alert(error.message);\n      return thunkAPI.rejectWithValue(err.message);\n    }\n  });\n  return function (_x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}());\nexport var getOwnPosts = createAsyncThunk(\"posts/getOwnPosts\", function () {\n  var _ref4 = _asyncToGenerator(function* (uid, thunkAPI) {\n    try {\n      var getPosts = function () {\n        var _ref5 = _asyncToGenerator(function* () {\n          var posts = [];\n          var q = query(collection(db, \"posts\"), where(\"userId\", \"==\", uid));\n          var querySnapshot = yield getDocs(q);\n          querySnapshot.forEach(function (doc) {\n            posts.push(doc.data());\n          });\n          return posts.sort(function (firstPost, lastPost) {\n            return lastPost.createdAt - firstPost.createdAt;\n          });\n        });\n        return function getPosts() {\n          return _ref5.apply(this, arguments);\n        };\n      }();\n      var posts = yield getPosts();\n      return posts;\n    } catch (err) {\n      Alert.alert(error.message);\n      return thunkAPI.rejectWithValue(err.message);\n    }\n  });\n  return function (_x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}());\nexport var addPost = createAsyncThunk(\"posts/addPost\", function () {\n  var _ref6 = _asyncToGenerator(function* (post, thunkAPI) {\n    try {\n      return post;\n    } catch (error) {\n      Alert.alert(error.message);\n      return thunkAPI.rejectWithValue(err.message);\n    }\n  });\n  return function (_x7, _x8) {\n    return _ref6.apply(this, arguments);\n  };\n}());\nexport var getPostCommnets = createAsyncThunk(\"posts/getPostComments\", function () {\n  var _ref7 = _asyncToGenerator(function* (id, thunkAPI) {\n    try {\n      var _getOwnPosts = function () {\n        var _ref8 = _asyncToGenerator(function* () {\n          var comments = [];\n          var q = query(collection(db, \"comments\"), where(\"postId\", \"==\", id));\n          var querySnapshot = yield getDocs(q);\n          querySnapshot.forEach(function (doc) {\n            comments.push(doc.data());\n          });\n          return comments;\n        });\n        return function _getOwnPosts() {\n          return _ref8.apply(this, arguments);\n        };\n      }();\n      var comments = yield _getOwnPosts();\n      return comments.sort(function (firstComment, lastComment) {\n        return lastComment.createdAt - firstComment.createdAt;\n      });\n    } catch (error) {\n      return thunkAPI.rejectWithValue(error.message);\n    }\n  });\n  return function (_x9, _x10) {\n    return _ref7.apply(this, arguments);\n  };\n}());","map":{"version":3,"names":["createAsyncThunk","collection","getDocs","query","where","db","Alert","getSemesterGpaStatistics","_ref","_asyncToGenerator","_","thunkAPI","Promise","resolve","reject","transaction","tx","executeSql","result","rows","length","statistics","item","console","log","error","message","rejectWithValue","_x","_x2","apply","arguments","getAllPosts","_ref2","getPosts","_ref3","querySnapshot","posts","forEach","doc","push","data","sort","firstPost","lastPost","createdAt","alert","err","_x3","_x4","getOwnPosts","_ref4","uid","_ref5","q","_x5","_x6","addPost","_ref6","post","_x7","_x8","getPostCommnets","_ref7","id","_ref8","comments","firstComment","lastComment","_x9","_x10"],"sources":["C:/Users/Meruem/Desktop/diplom_project/redux/posts/postsOperations.js"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { collection, getDocs, query, where } from \"firebase/firestore\";\r\nimport { db } from '../../firebase/config';\r\n\r\nimport { Alert } from \"react-native\";\r\n\r\nexport const getSemesterGpaStatistics = createAsyncThunk(\r\n    'statistics/getSemesterGpaStatistics',\r\n    async (_, thunkAPI) => {\r\n        try {\r\n            return new Promise((resolve, reject) => {\r\n                db.transaction(tx => {\r\n                    tx.executeSql(\r\n                        'SELECT COUNT(semester_gpa) AS count, AVG(semester_gpa) AS average, MAX(semester_gpa) AS maxGpa, MIN(semester_gpa) AS minGpa FROM Students',\r\n                        [],\r\n                        (_, result) => {\r\n                            const { rows } = result;\r\n                            if (rows.length > 0) {\r\n                                const statistics = rows.item(0);\r\n                                console.log('Статистика по semester_gpa:', statistics);\r\n                                resolve(statistics);\r\n                            } else {\r\n                                console.log('Нет данных для вычисления статистики по semester_gpa');\r\n                                reject('Нет данных для вычисления статистики по semester_gpa');\r\n                            }\r\n                        },\r\n                        error => {\r\n                            console.error('Ошибка при выполнении запроса на получение статистики', error);\r\n                            reject(error.message);\r\n                        }\r\n                    );\r\n                });\r\n            });\r\n        } catch (error) {\r\n            console.error('Ошибка при выполнении запроса на получение статистики', error);\r\n            return thunkAPI.rejectWithValue(error.message);\r\n        }\r\n    }\r\n);\r\nexport const getAllPosts = createAsyncThunk(\r\n  \"posts/getAllPosts\",\r\n  async (_, thunkAPI) => {\r\n    try {\r\n      const getPosts = async () => {\r\n        const querySnapshot = await getDocs(collection(db, \"posts\"));\r\n        const posts = [];\r\n        querySnapshot.forEach((doc) => {\r\n          posts.push(doc.data());\r\n        });\r\n        return posts;\r\n      };\r\n      const posts = await getPosts();\r\n      return posts.sort(\r\n        (firstPost, lastPost) => lastPost.createdAt - firstPost.createdAt\r\n      );\r\n  } catch (error) {\r\n      Alert.alert(error.message);\r\n      return thunkAPI.rejectWithValue(err.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const getOwnPosts = createAsyncThunk(\r\n  \"posts/getOwnPosts\",\r\n  async (uid, thunkAPI) => {\r\n    try {\r\n      const getPosts = async () => {\r\n        const posts = [];\r\n        const q = query(collection(db, \"posts\"), where(\"userId\", \"==\", uid));\r\n\r\n        const querySnapshot = await getDocs(q);\r\n        querySnapshot.forEach((doc) => {\r\n            posts.push(doc.data());\r\n        });\r\n        return posts.sort(\r\n            (firstPost, lastPost) => lastPost.createdAt - firstPost.createdAt\r\n        );\r\n        };\r\n        const posts = await getPosts();\r\n        return posts;\r\n    } catch (err) {\r\n        Alert.alert(error.message);\r\n        return thunkAPI.rejectWithValue(err.message);\r\n    }\r\n  }\r\n);\r\n\r\nexport const addPost = createAsyncThunk(\r\n  \"posts/addPost\",\r\n  async (post, thunkAPI) => {\r\n      try {\r\n          return post;\r\n      } catch (error) {\r\n        Alert.alert(error.message);\r\n        return thunkAPI.rejectWithValue(err.message);\r\n    }\r\n}\r\n);\r\n\r\nexport const getPostCommnets = createAsyncThunk(\r\n  \"posts/getPostComments\",\r\n  async (id, thunkAPI) => {\r\n    try {\r\n      const getOwnPosts = async () => {\r\n        const comments = [];\r\n        const q = query(collection(db, \"comments\"), where(\"postId\", \"==\", id));\r\n\r\n        const querySnapshot = await getDocs(q);\r\n        querySnapshot.forEach((doc) => {\r\n          comments.push(doc.data());\r\n        });\r\n        return comments;\r\n      };\r\n      const comments = await getOwnPosts();\r\n      return comments.sort(\r\n        (firstComment, lastComment) =>\r\n          lastComment.createdAt - firstComment.createdAt\r\n      );\r\n    } catch (error) {\r\n      return thunkAPI.rejectWithValue(error.message);\r\n    }\r\n  }\r\n);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}